name: Build and Release Electron App

on:
  # 'v'から始まるタグ（例: v1.0.0）がプッシュされたときに実行
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

jobs:
  release:
    # Mac, Windows, Linuxの各OSで並行してジョブを実行
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          # electron-builderがタグ情報を使ってリリースできるように履歴全体を取得
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm' # npm依存関係のキャッシュを有効化

      - name: Install Dependencies
        # package-lock.jsonに基づき依存関係をインストール
        run: npm ci

      - name: Build Web Content (Vite)
        # エラーの原因となったステップを修正し、'run'コマンドを追加します。
        # まずクリーンアップを行い、次にViteでWebコンテンツをビルドします。
        run: |
          npm run clean
          # ご提示の package.json の 'build' スクリプトは 'vite build' を含んでいるため、
          # 'vite build' を直接実行します。
          # 'electron-builder' が実行されないように注意が必要です。
          # 理想的には 'npm run build:web' を定義すべきですが、ここでは直接コマンドを使用します。
          # 厳密には vite build の前に 'rimraf dist release' が必要ですが、
          # npm run clean がそれを行っています。
          npm run clean # 念のため再度クリーンアップ
          npx vite build

      - name: Build and Publish Electron App to GitHub Release
        # electron-builderを使用して各プラットフォーム向けにパッケージングし、リリースにアップロード
        uses: samuelmeuli/action-electron-builder@v1
        with:
          # GitHubが提供するトークン。リリースへのアップロード権限を付与
          github_token: ${{ secrets.GITHUB_TOKEN }}
          
          # Webコンテンツは既にビルド済みのため、ここでは 'electron-builder' の実行のみを行います。
          # build_scriptを省略することで、アクションがOSに応じた electron-builder コマンドを実行します。
          
          # ビルド後に、成果物をタグに対応するリリースにアップロードする
          release: true