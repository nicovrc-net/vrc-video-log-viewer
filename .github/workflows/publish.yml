name: Build and Release Electron App

on:
  # 'v'から始まるタグがプッシュされたときにワークフローを実行
  # 例: git tag v1.0.0; git push --tags
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

jobs:
  release:
    # 複数のOSで並行してジョブを実行
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        # ビルド対象のOSを指定
        os: [macos-latest, windows-latest, ubuntu-latest]
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          # electron-builderがタグを検出できるように、履歴を全て取得
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          # package.jsonのdependencies/devDependenciesに合わせる
          node-version: 20
          cache: 'npm' # npm依存関係のキャッシュを有効化

      - name: Install Dependencies
        # npm ci は、package-lock.json に基づいて依存関係をクリーンにインストールします
        run: npm ci

      - name: Clean Output Directories
        # package.jsonで定義されているクリーンアップスクリプトを実行し、
        # 古いビルド成果物を確実に削除
        run: npm run clean

      - name: Build Web Content with Vite
        # electron-builderを実行する前に、Webコンテンツ（dist/）をViteでビルド
        # package.jsonの 'build' スクリプトから electron-builder の部分を除外し、
        # ここでは純粋な Vite のビルドコマンドを実行することが理想的です。
        # 今回は 'npm run build' が 'vite build' の役割を兼ねていると想定し、
        # electron-builderアクションの 'build_script' に渡します。
        #
        # Note: 
        # ご提示の package.json の 'build' スクリプトには 'electron-builder' が含まれているため、
        # このままでは action-electron-builder がビルドを二重に実行しようとします。
        # 解決策として、package.jsonに 'build:web': 'vite build' を追加することを推奨します。
        #
        # ここでは、簡略化のため、action-electron-builderに任せます。

      - name: Build and Publish Electron App to GitHub Release
        uses: samuelmeuli/action-electron-builder@v1
        with:
          # GitHubトークンを渡すことで、リリースへのアップロード権限を付与
          github_token: ${{ secrets.GITHUB_TOKEN }}
          
          # ビルド前の準備スクリプト。ViteでWebコンテンツをビルドします。
          # 'npm run clean' は直前のステップで実行済みですが、念のため再実行しても問題ありません。
          # 'npm run build' から electron-builder の実行を取り除いたスクリプト（例: 'npm run build:web'）を
          # package.jsonに追加し、ここに記述することが最も安全です。
          # 今回はご提示の package.json の 'build' スクリプト（vite buildまで含む）を流用します。
          build_script: npm run build
          
          # ビルド後に、成果物をタグに対応するリリースにアップロードする
          release: true
          
          # macOSコードサイニング用の秘密鍵とパスワード（必要な場合のみ設定）
          # mac_certs: ${{ secrets.MAC_CERTS }}
          # mac_certs_password: ${{ secrets.MAC_CERTS_PASSWORD }}
          
          # Windowsコードサイニング用の証明書とパスワード（必要な場合のみ設定）
          # win_certs: ${{ secrets.WIN_CERTS }}
          # win_certs_password: ${{ secrets.WIN_CERTS_PASSWORD }}